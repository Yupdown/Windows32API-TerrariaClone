#pragma once
#pragma once
#include <thread>
#include <Windows.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <memory>
#include <execution>
using std::jthread;
using std::thread;
using std::vector;
using std::unique_ptr;
using std::make_unique;
#include <string>
using std::string;
using std::wstring;
#include <string_view>
using std::string_view;
using std::wstring_view;
#include <cmath>
#include <cassert>
#include <map>
#include <algorithm>
#include <bitset>
#include <unordered_map>
#include <optional>
#include <utility>
#include <variant>
#include <array>
#include <functional>
#include <any>
using std::bind;
using std::any;
using std::function;
using std::array;
using std::variant;
using std::get;
using std::optional;
using std::unordered_map;
using std::bitset;
using std::map;
using std::make_pair;
using std::shared_ptr;
using std::unordered_multimap;
using std::multimap;
#include <coroutine>
#include <list>
#include <fstream>
#include <chrono>
#include <filesystem>
#include <concepts>
#include <type_traits>
#include <bitset>
using std::wofstream;
using std::wifstream;
using std::list;
#include <initializer_list>
using std::initializer_list;
#pragma comment(lib,"Msimg32.lib")	
using std::pair;

#include "Singleton.hpp"
#include "define.h"
#include "Vec2.hpp"
#include "func.h"